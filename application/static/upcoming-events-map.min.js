const FUTURE_EVENT_MAP_CONTAINER_CLASS="upcoming-events-map",SINGLE_EVENT_MAP_CONTAINER_CLASS="single-event-map",FUTURE_EVENTS_ENDPOINT="future_events_sample.json",MAPS_KEY="AIzaSyBtrkN2c8rrSWUdy6-SKqp8stjYBVb3by8",SEARCH_BOX_ID="events-map-search-box",RESULTS_CONTAINER_ID="search-results-container";function initMaps(){const futureEventMapsContainers=document.getElementsByClassName(FUTURE_EVENT_MAP_CONTAINER_CLASS);futureEventMapsContainers[0].classList.remove("map-container--loading");const searchMap=new google.maps.Map(futureEventMapsContainers[0],{center:{lat:-34.397,lng:150.644},zoom:5,disableDefaultUI:!0,mapTypeControl:!0,mapTypeControlOptions:{position:google.maps.ControlPosition.TOP_RIGHT}}),searchBox=document.getElementById(SEARCH_BOX_ID),filterCircle=new google.maps.Circle({strokeColor:"#006747",strokeOpacity:.8,strokeWeight:2,fillColor:"#006747",fillOpacity:.1,radius:8e3});populateMap(searchMap).then(markers=>{searchBox&&futureEventMapsContainers[0]&&searchBox.addEventListener("change",inputBox=>{handleSearchInput(inputBox.target.value,searchMap,filterCircle,markers).then(resultsFromMarkers).then(resultsList=>{const resultsListContainer=document.getElementById(RESULTS_CONTAINER_ID);resultsListContainer.innerHTML="",resultsListContainer.appendChild(resultsList)})})});const eventMapContainer=document.getElementsByClassName(SINGLE_EVENT_MAP_CONTAINER_CLASS);eventMaps=Array.from(eventMapContainer).map(container=>{container.classList.remove("map-container--loading");const coords={lat:+container.dataset.lat,lng:+container.dataset.lng},map=new google.maps.Map(container,{center:coords,zoom:5,disableDefaultUI:!0,clickableIcons:!1,disableDoubleClickZoom:!0,draggable:!1,scrollwheel:!1}),marker=new google.maps.Marker({position:coords,map:map});return showAllMarkers(map,[marker]),map})}function populateMap(map){return new Promise((res,rej)=>{getJSON(FUTURE_EVENTS_ENDPOINT).then(events=>{const markers=eventsToMarkers(events,map);showAllMarkers(map,markers),res(markers)}).catch(err=>{console.trace(err),map.getDiv().classList.add("map-container--error"),rej(err)})})}function getJSON(url){return new Promise((resolve,reject)=>{const req=new XMLHttpRequest;req.responseType="json",req.open("GET",url),req.onload=(()=>{200==req.status?resolve(req.response):reject(Error(req.statusText))}),req.onerror=(()=>{reject(Error("Network Error"))}),req.send()})}function eventsToMarkers(events,map){return events.map(event=>{const marker=new google.maps.Marker({title:event.EventName,position:{lat:event.Lat,lng:event.Lng},map:map});return marker.eventTime=`${event.date} at ${event.time}`,marker.addListener("click",marker=>{window.location.href=`view-event?eventID=${event.EventID}`}),marker})}function showAllMarkers(map,markers){const bounds=new google.maps.LatLngBounds(markers[0].position,markers[0].position);markers.length>1?(markers.forEach(marker=>{bounds.extend(marker.position)}),map.fitBounds(bounds)):map.panTo(markers[0].position)}function geoCodeAddress(potentialAddress){const escaped=encodeURIComponent(potentialAddress);return new Promise((res,rej)=>{getJSON(`https://maps.googleapis.com/maps/api/geocode/json?address=${escaped}&key=${MAPS_KEY}&region=us`).then(response=>{"OK"===response.status?res({lat:response.results[0].geometry.location.lat,lng:response.results[0].geometry.location.lng,nice:response.results[0].formatted_address}):rej(response.status)}).catch(rej)})}function handleSearchInput(input,map,circle,markers){geoCodeAddress(input).then(result=>{const shownMarkers=[];return circle.setCenter({lat:result.lat,lng:result.lng}),circle.setMap(map),map.fitBounds(circle.getBounds()),map.setZoom(map.zoom-1),markers.forEach(marker=>{isInCircle(marker,circle)||(marker.setOpacity(.3),shownMarkers.append(marker))}),shownMarkers}).catch(err=>{circle.setMap(null),markers.forEach(marker=>marker.setOpacity(1)),console.trace(err)})}function isInCircle(marker,circle){return google.maps.geometry.spherical.computeDistanceBetween(marker.getPosition(),circle.getCenter())<=circle.getRadius()}function resultsFromMarkers(markers){const container=document.createElement("div");return container.classList.add("filter-list"),markers.forEach(marker=>{const listItem=document.createElement("div");listItem.classList.add("filter-list__item");const itemHeading=document.createElement("h3");itemHeading.classList.add("section-heading");const itemTime=document.createElement("span");itemTime.innerText=marker.eventTime,itemTime.classList.add("bold"),container.appendChild(listItem)}),container}